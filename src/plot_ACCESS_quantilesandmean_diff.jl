# qsub -I -P xv83 -l mem=64GB -l storage=scratch/gh0+scratch/xv83 -l walltime=02:00:00 -l ncpus=12

using Pkg
Pkg.activate(".")
Pkg.instantiate()

using OceanTransportMatrixBuilder
using NetCDF
using YAXArrays
using DataFrames
using DimensionalData
# using SparseArrays
# using LinearAlgebra
using Unitful
using Unitful: s, yr
try
    using CairoMakie
catch
    using CairoMakie
end
using GeoMakie
using Interpolations
using OceanBasins
using Statistics
using NaNStatistics
using StatsBase
using FileIO
using Contour
using GeometryBasics
using GeometryOps
using LibGEOS
using Format


model = "ACCESS-ESM1-5"

time_window1 = "Jan2030-Dec2039"
time_window2 = "Jan2090-Dec2099"
experiment1 = parse(Int, time_window1[4:7]) ‚â§ 2010 ? "historical" : "ssp370"
experiment2 = parse(Int, time_window2[4:7]) ‚â§ 2010 ? "historical" : "ssp370"

members_mean = ["r$(r)i1p1f1" for r in 1:40]
members = ["r$(r)i1p1f1" for r in 1:3]

# Gadi directory for input files
# inputdirfun(member) = "/scratch/xv83/TMIP/data/$model/$experiment/all members/$(time_window)"
inputdir1 = "/scratch/xv83/TMIP/data/$model/$experiment1/all_members/$(time_window1)/cyclomonth"
inputdir2 = "/scratch/xv83/TMIP/data/$model/$experiment2/all_members/$(time_window2)/cyclomonth"
outputdir = inputdir2
mkpath(inputdir2)



# Load areacello and volcello for grid geometry
fixedvarsinputdir = "/scratch/xv83/TMIP/data/$model"
volcello_ds = open_dataset(joinpath(fixedvarsinputdir, "volcello.nc"))
areacello_ds = open_dataset(joinpath(fixedvarsinputdir, "areacello.nc"))

# Load fixed variables in memory
areacello = readcubedata(areacello_ds.areacello)
volcello = readcubedata(volcello_ds.volcello)
lon = readcubedata(volcello_ds.lon)
lat = readcubedata(volcello_ds.lat)
lev = volcello_ds.lev
# Identify the vertices keys (vary across CMIPs / models)
volcello_keys = propertynames(volcello_ds)
lon_vertices_key = volcello_keys[findfirst(x -> occursin("lon", x) & occursin("vert", x), string.(volcello_keys))]
lat_vertices_key = volcello_keys[findfirst(x -> occursin("lat", x) & occursin("vert", x), string.(volcello_keys))]
lon_vertices = readcubedata(getproperty(volcello_ds, lon_vertices_key))
lat_vertices = readcubedata(getproperty(volcello_ds, lat_vertices_key))
# Make makegridmetrics
gridmetrics = makegridmetrics(; areacello, volcello, lon, lat, lev, lon_vertices, lat_vertices)
(; lon_vertices, lat_vertices, lon, lat, zt, v3D, thkcello, Z3D) = gridmetrics
lev = zt
# Make indices
indices = makeindices(gridmetrics.v3D)
(; wet3D, N) = indices



‚Ñ∞_files1 = ["/scratch/xv83/TMIP/data/$model/$experiment1/$member/$(time_window1)/calE.nc" for member in members]
‚Ñ∞_files2 = ["/scratch/xv83/TMIP/data/$model/$experiment2/$member/$(time_window2)/calE.nc" for member in members]
‚Ñ∞_ds1 = open_mfdataset(DimArray(‚Ñ∞_files1, Dim{:member}(members)))
‚Ñ∞_ds2 = open_mfdataset(DimArray(‚Ñ∞_files2, Dim{:member}(members)))
‚Ñ∞1 = readcubedata(‚Ñ∞_ds1.calE)
‚Ñ∞2 = readcubedata(‚Ñ∞_ds2.calE)



years = ‚Ñ∞_ds1.Ti |> Array

# little helper function to get the year given a quantile
function yearatquantile(‚Ñ∞, ‚Ñ∞level)
    isnan(‚Ñ∞[1]) && return NaN
    out = findfirst(‚Ñ∞ .< ‚Ñ∞level)
    isnothing(out) ? maximum(years) : Float64(out)
end
‚Ñ∞10_1 = map(
    ts -> yearatquantile(ts, 0.9),
    view(‚Ñ∞1, i, j, :, m) for i in 1:size(‚Ñ∞1,1), j in 1:size(‚Ñ∞1,2), m in 1:size(‚Ñ∞1,4)
)
‚Ñ∞10_1_ensemblemean = dropdims(mean(‚Ñ∞10_1, dims = 3), dims = 3)
‚Ñ∞10_2 = map(
    ts -> yearatquantile(ts, 0.9),
    view(‚Ñ∞2, i, j, :, m) for i in 1:size(‚Ñ∞2,1), j in 1:size(‚Ñ∞2,2), m in 1:size(‚Ñ∞2,4)
)
‚Ñ∞10_2_ensemblemean = dropdims(mean(‚Ñ∞10_2, dims = 3), dims = 3)
‚Ñ∞10_diff = ‚Ñ∞10_2_ensemblemean - ‚Ñ∞10_1_ensemblemean

‚Ñ∞50_1 = map(
    ts -> yearatquantile(ts, 0.5),
    view(‚Ñ∞1, i, j, :, m) for i in 1:size(‚Ñ∞1,1), j in 1:size(‚Ñ∞1,2), m in 1:size(‚Ñ∞1,4)
)
‚Ñ∞50_1_ensemblemean = dropdims(mean(‚Ñ∞50_1, dims = 3), dims = 3)
‚Ñ∞50_2 = map(
    ts -> yearatquantile(ts, 0.5),
    view(‚Ñ∞2, i, j, :, m) for i in 1:size(‚Ñ∞2,1), j in 1:size(‚Ñ∞2,2), m in 1:size(‚Ñ∞2,4)
)
‚Ñ∞50_2_ensemblemean = dropdims(mean(‚Ñ∞50_2, dims = 3), dims = 3)
‚Ñ∞50_diff = ‚Ñ∞50_2_ensemblemean - ‚Ñ∞50_1_ensemblemean



# Load \Gamma out
Œ∫Vdeep = 3.0e-5 # m^2/s
Œ∫VML = 1.0      # m^2/s
Œ∫H = 300.0      # m^2/s
Œ∫Vdeep_str = "kVdeep" * format(Œ∫Vdeep, conversion="e")
Œ∫VML_str = "kVML" * format(Œ∫VML, conversion="e")
Œ∫H_str = "kH" * format(Œ∫H, conversion="d")
upwind = false
upwind_str = upwind ? "" : "_centered"
upwind_str2 = upwind ? "upwind" : "centered"

Gammaout_files1 = ["/scratch/xv83/TMIP/data/$model/$experiment1/$member/$(time_window1)/cyclomonth/reemergence_time$(upwind_str)_$(Œ∫Vdeep_str)_$(Œ∫H_str)_$(Œ∫VML_str).nc" for member in members_mean]
Œìoutyr3D1_ds = open_mfdataset(DimArray(Gammaout_files1, Dim{:member}(members_mean)))
Œìoutyr3D1 = readcubedata(Œìoutyr3D1_ds.adjointage)
Œìoutyr3D1_timemean = dropdims(mean(Œìoutyr3D1, dims = Ti), dims = Ti) # TODO use monthly weights
Œìoutyr3D1_ensemblemean = dropdims(mean(Œìoutyr3D1_timemean, dims = 4), dims = 4)
Gammaout_files2 = ["/scratch/xv83/TMIP/data/$model/$experiment2/$member/$(time_window2)/cyclomonth/reemergence_time$(upwind_str)_$(Œ∫Vdeep_str)_$(Œ∫H_str)_$(Œ∫VML_str).nc" for member in members_mean]
Œìoutyr3D2_ds = open_mfdataset(DimArray(Gammaout_files2, Dim{:member}(members_mean)))
Œìoutyr3D2 = readcubedata(Œìoutyr3D2_ds.adjointage)
Œìoutyr3D2_timemean = dropdims(mean(Œìoutyr3D2, dims = Ti), dims = Ti) # TODO use monthly weights
Œìoutyr3D2_ensemblemean = dropdims(mean(Œìoutyr3D2_timemean, dims = 4), dims = 4)

include("plotting_functions.jl")

Œìout1_ensemblemean = seafloorvalue(Œìoutyr3D1_ensemblemean, wet3D, gridmetrics)
Œìout2_ensemblemean = seafloorvalue(Œìoutyr3D2_ensemblemean, wet3D, gridmetrics)
Œìout_ensemblemean_diff = Œìout2_ensemblemean - Œìout1_ensemblemean

usecontourf = false

axs = Array{Any,2}(undef, (3, 2))
contours = Array{Any,2}(undef, (3, 2))
nrows, ncols = size(axs)

fig = Figure(size = (ncols * 500, nrows * 250 + 100), fontsize = 18)

yticks = -60:30:60
xticks = -120:60:120 + 360

datamean = (Œìout2_ensemblemean, ‚Ñ∞50_2_ensemblemean, ‚Ñ∞10_2_ensemblemean)
datadiff = (Œìout_ensemblemean_diff, ‚Ñ∞50_diff, ‚Ñ∞10_diff)
ùíì = rich("r", font = :bold_italic)
Œìstr = rich("Œì", superscript("‚Ä†"), rich("‚Äæ", offset = (-0.55, 0.25)), rich("‚Äæ", offset = (-0.85, 0.25)))
Œìfun = rich(Œìstr, rich("(", ùíì, ")", offset = (0.4, 0)))
# Qstr = rich("Q", font = :italic)
‚Ñ∞str = rich("‚Ñ∞", rich("‚Äæ", offset = (-0.5, 0.15)))
# Q10 = rich(Qstr, "(0.1)")
# Q50 = rich(Qstr, "(0.5)")
rowlabels = (rich("Mean time, ", Œìfun), rich("Median, ", ‚Ñ∞str, "¬†=¬†50¬†%"), rich("10th percentile, ", ‚Ñ∞str, "¬†=¬†90¬†%"))


for (irow, (x2Dmean, x2Ddiff, text)) in enumerate(zip(datamean, datadiff, rowlabels))

    # Plot ensemble mean
    icol = 1
    levels = 0:200:4000
    colormap = cgrad(:viridis, length(levels), categorical = true)
    highclip = colormap[end]
    colormap = cgrad(colormap[1:end-1], categorical = true)
    colorrange = extrema(levels)

    axs[irow, icol] = ax = Axis(fig[irow, icol]; yticks, xticks, xtickformat, ytickformat)

    contours[irow, icol] = if usecontourf
        plotcontourfmap!(ax, x2Dmean, gridmetrics; levels, colormap)
    else
        plotmap!(ax, x2Dmean, gridmetrics; colorrange, colormap, highclip) # <- need to fix wrapping longitude for contour levels
    end

    myhidexdecorations!(ax, irow < nrows)
    myhideydecorations!(ax, icol > 1)

    # Plot ensemble diff
    icol = 2
    levels = -1000:100:1000
    colormap = cgrad(cgrad(:balance, length(levels), categorical = true)[[1:end√∑2+1; end√∑2+1:end]], categorical = true)
    highclip = colormap[end]
    lowclip = colormap[1]
    colormap = cgrad(colormap[2:end-1], categorical = true)
    colorrange = extrema(levels)

    axs[irow, icol] = ax = Axis(fig[irow, icol]; yticks, xticks, xtickformat, ytickformat)

    contours[irow, icol] = if usecontourf
        plotcontourfmap!(ax, x2Ddiff, gridmetrics; levels, colormap)
    else
        plotmap!(ax, x2Ddiff, gridmetrics; colorrange, colormap, lowclip, highclip) # <- need to fix wrapping longitude for contour levels
    end

    myhidexdecorations!(ax, irow < nrows)
    myhideydecorations!(ax, icol > 1)

    Label(fig[irow, 0]; text, rotation = œÄ/2, tellheight = false)

end


label = rich("ensemble mean (years)")
cb = Colorbar(fig[nrows + 1, 1], contours[1, 1]; label, vertical = false, flipaxis = false, ticks = 0:1000:4000)
cb.width = Relative(2/3)

label = rich("ensemble mean 2090s ‚àí 2030s (years)")
cb = Colorbar(fig[nrows + 1, 2], contours[1, 2]; label, vertical = false, flipaxis = false, ticks = -1000:500:1000, tickformat = divergingcbarticklabelformat)
cb.width = Relative(2/3)

# column labels
# Label(fig[0, 1]; text = "ensemble mean", tellwidth = false)
# Label(fig[0, 2]; text = "ensemble range (internal variability)", tellwidth = false)

labels = [
    "a" "d"
    "b" "e"
    "c" "f"
]

for (ax, label) in zip(axs, labels)
    txt = text!(ax, 0, 1; text = "$label", labeloptions..., strokecolor = :white, strokewidth = 3)
    translate!(txt, 0, 0, 100)
    txt = text!(ax, 0, 1; text = "$label", labeloptions...)
    translate!(txt, 0, 0, 100)
end

Label(fig[0, 1:2]; text = "Climate Change Effect on Seafloor Reemergence Time ($(length(members)) members)", fontsize = 24, tellwidth = false)
rowgap!(fig.layout, 10)
colgap!(fig.layout, 10)

# save plot
suffix = usecontourf ? "_ctrf" : ""
outputfile = joinpath(outputdir, "reemergencetime_diff_$(time_window2)$(suffix).png")
@info "Saving reemergencetime on sea floor as image file:\n  $(outputfile)"
save(outputfile, fig)
outputfile = joinpath(outputdir, "reemergencetime_diff_$(time_window2)$(suffix).pdf")
@info "Saving reemergencetime on sea floor as image file:\n  $(outputfile)"
save(outputfile, fig)

